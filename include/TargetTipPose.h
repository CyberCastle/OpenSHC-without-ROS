// Generated by gencpp from file syropod_highlevel_controller/TargetTipPose.msg
// DO NOT EDIT!

#ifndef SYROPOD_HIGHLEVEL_CONTROLLER_MESSAGE_TARGETTIPPOSE_H
#define SYROPOD_HIGHLEVEL_CONTROLLER_MESSAGE_TARGETTIPPOSE_H

#include "Pose.hpp"
#include <memory>
#include <string>
#include <vector>

namespace syropod_highlevel_controller {

template <class ContainerAllocator>
struct TargetTipPose_ {

    typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
    _name_type name;

    typedef std::vector<geometry_msgs::PoseStamped, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<::geometry_msgs::PoseStamped>> _target_type;
    _target_type target;

    typedef std::vector<::geometry_msgs::PoseStamped, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<::geometry_msgs::PoseStamped>> _stance_type;
    _stance_type stance;

    typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _swing_clearance_type;
    _swing_clearance_type swing_clearance;

}; // struct TargetTipPose_

typedef ::syropod_highlevel_controller::TargetTipPose_<std::allocator<void>> TargetTipPose;

} // namespace syropod_highlevel_controller

#endif // SYROPOD_HIGHLEVEL_CONTROLLER_MESSAGE_TARGETTIPPOSE_H
